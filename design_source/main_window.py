# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'D:\대하꾜\수업\3학년_2학기\게임인공지능\팀플/main_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QCoreApplication, QTimer
import main_window_rc
import cv2
import sys
import threading
import random
import os
from trained_model import model


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 614)

        MainWindow.setLayoutDirection(QtCore.Qt.RightToLeft)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setIconSize(QtCore.QSize(24, 22))
        MainWindow.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        MainWindow.setAnimated(False)

        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("bunny_icon.png"),
                       QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setIconSize(QtCore.QSize(59, 59))

        self.update_check = bool  # GUI를 업데이트 해야하는가?
        self.capture_image = bool  # 이미지 캡쳐 해야하는가?
        self.player_lose = False  # 플레이어가 패배했는지? True면 패배한거
        self.score = 0  # 현재 스코어

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.game_logo = QtWidgets.QLabel(self.centralwidget)
        self.game_logo.setEnabled(True)
        self.game_logo.setGeometry(QtCore.QRect(318, 83, 164, 83))
        self.game_logo.setAutoFillBackground(False)
        self.game_logo.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.game_logo.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.game_logo.setText("")
        self.game_logo.setPixmap(QtGui.QPixmap(":/mainwindow/game_logo.png"))
        self.game_logo.setObjectName("game_logo")

        # 얘 역시 겹쳐있어서 주석 처리함

        self.game_start = QtWidgets.QLabel(self.centralwidget)
        self.game_start.setEnabled(True)
        self.game_start.setGeometry(QtCore.QRect(330, 300, 139, 38))
        self.game_start.setText("")
        self.game_start.setPixmap(QtGui.QPixmap(":/mainwindow/game_start.png"))
        self.game_start.setObjectName("game_start")
        self.game_start.hide()

        self.game_explain = QtWidgets.QLabel(self.centralwidget)
        self.game_explain.setEnabled(True)
        self.game_explain.setGeometry(QtCore.QRect(330, 340, 139, 38))
        self.game_explain.setText("")
        self.game_explain.setPixmap(QtGui.QPixmap(":/mainwindow/game_explain.png"))
        self.game_explain.setObjectName("game_explain")

        self.game_exit = QtWidgets.QLabel(self.centralwidget)
        self.game_exit.setEnabled(True)
        self.game_exit.setGeometry(QtCore.QRect(330, 380, 139, 38))
        self.game_exit.setText("")
        self.game_exit.setPixmap(QtGui.QPixmap(":/mainwindow/game_exit.png"))
        self.game_exit.setObjectName("game_exit")

        self.game_start_button = QtWidgets.QPushButton(self.centralwidget)
        self.game_start_button.setGeometry(QtCore.QRect(330, 300, 139, 38))
        self.game_start_button.setMouseTracking(False)
        self.game_start_button.setFocusPolicy(QtCore.Qt.NoFocus)
        self.game_start_button.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.game_start_button.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.game_start_button.setAutoFillBackground(False)
        self.game_start_button.setStyleSheet("image: url(:/mainwindow/game_start.png);")
        self.game_start_button.setText("")
        self.game_start_button.setCheckable(False)
        self.game_start_button.setAutoDefault(False)
        self.game_start_button.setDefault(False)
        self.game_start_button.setFlat(True)
        self.game_start_button.setObjectName("game_start_button")

        self.background = QtWidgets.QLabel(self.centralwidget)
        self.background.setGeometry(QtCore.QRect(0, -1, 800, 601))
        self.background.setText("")
        self.background.setPixmap(QtGui.QPixmap(":/mainwindow/Main_window_background.png"))
        self.background.setObjectName("background")

        self.game_explain_button = QtWidgets.QPushButton(self.centralwidget)
        self.game_explain_button.setGeometry(QtCore.QRect(330, 340, 139, 38))
        self.game_explain_button.setMouseTracking(False)
        self.game_explain_button.setFocusPolicy(QtCore.Qt.NoFocus)
        self.game_explain_button.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.game_explain_button.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.game_explain_button.setAutoFillBackground(False)
        self.game_explain_button.setText("")
        self.game_explain_button.setCheckable(False)
        self.game_explain_button.setAutoDefault(False)
        self.game_explain_button.setDefault(False)
        self.game_explain_button.setFlat(True)
        self.game_explain_button.setObjectName("game_explain_button")

        self.game_exit_button = QtWidgets.QPushButton(self.centralwidget)
        self.game_exit_button.setGeometry(QtCore.QRect(330, 380, 139, 38))
        self.game_exit_button.setMouseTracking(False)
        self.game_exit_button.setFocusPolicy(QtCore.Qt.NoFocus)
        self.game_exit_button.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.game_exit_button.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.game_exit_button.setAutoFillBackground(False)
        self.game_exit_button.setText("")
        self.game_exit_button.setCheckable(False)
        self.game_exit_button.setAutoDefault(False)
        self.game_exit_button.setDefault(False)
        self.game_exit_button.setFlat(True)
        self.game_exit_button.setObjectName("game_exit_button")
        self.game_exit_button.clicked.connect(QCoreApplication.instance().quit)  # 누르면 바로 종료

        self.bunny = QtWidgets.QLabel(self.centralwidget)
        self.bunny.setGeometry(QtCore.QRect(370, 200, 59, 94))
        self.bunny.setText("")
        self.bunny.setPixmap(QtGui.QPixmap(":/mainwindow/bunny.png"))
        self.bunny.setObjectName("bunny")

        self.background.raise_()
        self.game_logo.raise_()
        self.game_start.raise_()  # label이 겹쳐있어서 주석처리
        self.game_explain.raise_()
        self.game_exit.raise_()
        self.game_start_button.raise_()
        self.game_explain_button.raise_()
        self.bunny.raise_()
        self.game_exit_button.raise_()

        MainWindow.setCentralWidget(self.centralwidget)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.game_explain_start_button = QtWidgets.QPushButton(self.centralwidget)  # 게임설명 아래 시작버튼
        self.game_explain_start_button.setGeometry(QtCore.QRect(330, 450, 139, 38))
        self.game_explain_start_button.setMouseTracking(False)
        self.game_explain_start_button.setFocusPolicy(QtCore.Qt.NoFocus)
        self.game_explain_start_button.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.game_explain_start_button.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.game_explain_start_button.setAutoFillBackground(False)
        self.game_explain_start_button.setText("")
        self.game_explain_start_button.setCheckable(False)
        self.game_explain_start_button.setAutoDefault(False)
        self.game_explain_start_button.setDefault(False)
        self.game_explain_start_button.setFlat(True)
        self.game_explain_start_button.setObjectName("game_explain_start_button")
        self.game_explain_start_button.hide()  # 현재는 안나와있음

        self.game_explain_start = QtWidgets.QLabel(self.centralwidget)  # 게임설명 아래 시작버튼 label
        self.game_explain_start.setEnabled(True)
        self.game_explain_start.setGeometry(QtCore.QRect(330, 450, 139, 38))
        self.game_explain_start.setText("")
        self.game_explain_start.setPixmap(QtGui.QPixmap(":/mainwindow/game_start.png"))
        self.game_explain_start.setObjectName("game_explain_start")
        self.game_explain_start.hide()  # 현재는 안나와있음

        self.game_play_rule = QtWidgets.QLabel(self.centralwidget)
        self.game_play_rule.setEnabled(True)
        self.game_play_rule.setGeometry(QtCore.QRect(0, -1, 800, 601))
        self.game_play_rule.setAutoFillBackground(False)
        self.game_play_rule.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.game_play_rule.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.game_play_rule.setText("")
        self.game_play_rule.setPixmap(QtGui.QPixmap(":/mainwindow/explain.png"))
        self.game_play_rule.setObjectName("game_play_rule")
        self.game_play_rule.hide()  # 시작은 꺼져있어야함

        self.game_start_button.clicked.connect(self.hide_start_button)  # 클릭을 하면 꺼짐
        self.game_explain_button.clicked.connect(self.hide_explain_button)  # 클릭을 하면 꺼짐
        self.game_explain_start_button.clicked.connect(self.hide_explain_start_button)  # 클릭을 하면 꺼짐

        # self.game_play_rule.raise_()
        self.game_explain_start_button.raise_()
        self.game_explain_start_button.raise_()

        ### 게임화면 및 랜덤 이미지랑 전처리된 웹캠 부분~ ###

        self.rock_scissors_paper = QtWidgets.QLabel(self.centralwidget)  # 가위 바위 보 텍스트
        self.rock_scissors_paper.setGeometry(QtCore.QRect(340, 60, 121, 81))
        font = QtGui.QFont()
        font.setFamily("UhBee MiMi")
        font.setPointSize(24)
        self.rock_scissors_paper.setFont(font)
        self.rock_scissors_paper.setAlignment(QtCore.Qt.AlignCenter)
        self.rock_scissors_paper.setObjectName("rock_scissors_paper")
        self.rock_scissors_paper.setStyleSheet("Color : green")

        font = QtGui.QFont()
        font.setFamily("UhBee MiMi")
        font.setPointSize(26)
        self.rock_scissors_paper.hide()  # 처음은 당연히 숨어있기

        self.time_count = QtWidgets.QLabel(self.centralwidget)  # 타이머
        self.time_count.setGeometry(QtCore.QRect(320, 300, 121, 81))
        font = QtGui.QFont()
        font.setFamily("UhBee MiMi")
        font.setPointSize(24)
        self.time_count.setFont(font)
        self.time_count.setAlignment(QtCore.Qt.AlignCenter)
        self.time_count.setObjectName("time_count")
        self.time_count.setStyleSheet("Color : green")
        self.time_count.hide()

        self.win_lost_draw = QtWidgets.QLabel(self.centralwidget)
        self.win_lost_draw.setGeometry(QtCore.QRect(350, 270, 91, 41))  # X , Y , 넓이, 높이
        self.win_lost_draw.setFont(font)
        self.win_lost_draw.setAlignment(QtCore.Qt.AlignCenter)
        self.win_lost_draw.setObjectName("win_lost_draw")
        self.win_lost_draw.setStyleSheet("Color : green")
        self.win_lost_draw.hide()  # 얘도 마찬가지로

        self.random_image = QtWidgets.QLabel(self.centralwidget)
        self.random_image.setGeometry(QtCore.QRect(10, 150, 300, 300))
        self.random_image.setFont(font)
        self.random_image.setStyleSheet("Color : #E97341")
        self.random_image.setAlignment(QtCore.Qt.AlignCenter)
        self.random_image.setObjectName("random_image")
        self.random_image.hide()

        self.processed_webcam = QtWidgets.QLabel(self.centralwidget)
        self.processed_webcam.setGeometry(QtCore.QRect(490, 150, 300, 300))
        self.processed_webcam.setFont(font)
        self.processed_webcam.setStyleSheet("Color : #E97341")
        self.processed_webcam.setAlignment(QtCore.Qt.AlignCenter)
        self.processed_webcam.setObjectName("processed_webcam")
        self.processed_webcam.hide()

        self.before_webcam = QtWidgets.QLabel(self.centralwidget)  # 게임설명 아래 시작버튼 label
        self.before_webcam.setEnabled(True)
        self.before_webcam.setGeometry(QtCore.QRect(300, 450, 220, 30))
        self.before_webcam.setText("")
        self.before_webcam.setPixmap(QtGui.QPixmap(":/mainwindow/start_before.png"))
        self.before_webcam.setObjectName("before_webcam")
        self.before_webcam.hide()  # 현재는 안나와있음

        self.timer_start_button = QtWidgets.QPushButton(self.centralwidget)
        self.timer_start_button.setGeometry(QtCore.QRect(370, 480, 70, 70))
        self.timer_start_button.setStyleSheet("image: url(:/mainwindow/start_button.png);")
        self.timer_start_button.setMouseTracking(False)
        self.timer_start_button.setFocusPolicy(QtCore.Qt.NoFocus)
        self.timer_start_button.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.timer_start_button.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.timer_start_button.setAutoFillBackground(False)
        self.timer_start_button.setText("")
        self.timer_start_button.setCheckable(False)
        self.timer_start_button.setAutoDefault(False)
        self.timer_start_button.setDefault(False)
        self.timer_start_button.setFlat(True)
        self.timer_start_button.setObjectName("timer_start_button")
        self.timer_start_button.clicked.connect(self.update_bool)
        self.timer_start_button.hide()

        self.cam_not_work = QtWidgets.QLabel(self.centralwidget)
        self.cam_not_work.setGeometry(QtCore.QRect(350, 540, 111, 16))
        self.cam_not_work.setFont(font)
        self.cam_not_work.setStyleSheet("Color : red")
        self.cam_not_work.setAlignment(QtCore.Qt.AlignCenter)
        self.cam_not_work.setObjectName("cam_not_work")
        self.cam_not_work.hide()

        self.before_webcam.raise_()
        self.timer_start_button.raise_()
        self.rock_scissors_paper.raise_()
        self.win_lost_draw.raise_()
        self.random_image.raise_()
        self.processed_webcam.raise_()

        ### 점수 정산하는 label들 ###
        font.setPointSize(30)
        self.your_score_is = QtWidgets.QLabel(self.centralwidget)
        self.your_score_is.setGeometry(QtCore.QRect(200, 240, 400, 70))
        self.your_score_is.setFont(font)
        self.your_score_is.setAlignment(QtCore.Qt.AlignCenter)
        self.your_score_is.setObjectName("your_score_is")
        self.your_score_is.hide()  # 얘도 마찬가지로

        self.game_score = QtWidgets.QLabel(self.centralwidget)
        self.game_score.setGeometry(QtCore.QRect(370, 300, 70, 70))
        self.game_score.setFont(font)
        self.game_score.setAlignment(QtCore.Qt.AlignCenter)
        self.game_score.setObjectName("game_score")
        self.game_score.hide()

        self.back_start_button = QtWidgets.QPushButton(self.centralwidget)
        self.back_start_button.setGeometry(QtCore.QRect(370, 470, 70, 70))
        self.back_start_button.setStyleSheet("image: url(:/mainwindow/start_button.png);")
        self.back_start_button.setMouseTracking(False)
        self.back_start_button.setFocusPolicy(QtCore.Qt.NoFocus)
        self.back_start_button.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.back_start_button.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.back_start_button.setAutoFillBackground(False)
        self.back_start_button.setText("")
        self.back_start_button.setCheckable(False)
        self.back_start_button.setAutoDefault(False)
        self.back_start_button.setDefault(False)
        self.back_start_button.setFlat(True)
        self.back_start_button.setObjectName("back_start_button")
        self.back_start_button.clicked.connect(self.back_start_window)
        self.back_start_button.hide()

        self.your_score_is.raise_()
        self.game_score.raise_()
        self.back_start_button.raise_()

        self.retranslateUi(MainWindow)  # 맨 아래로 내려가 있어야 ui 보여주기에서 오류가 안남
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "늦게내는 가위바위보"))  # 이름 정해주는거
        self.game_start_button.setToolTip(_translate("MainWindow", "Game_start"))  # 마우스 올렸을 때 나타내는 tool tip
        self.game_explain_button.setToolTip(_translate("MainWindow", "Game_start"))
        self.game_exit_button.setToolTip(_translate("MainWindow", "Game_start"))

        self.rock_scissors_paper.setText(_translate("MainWindow", "승패여부"))  # 텍스트를 건드릴려면 여기로 랜덤
        self.win_lost_draw.setText(_translate("MainWindow", "로딩중..."))  # 랜덤
        self.random_image.setText(_translate("MainWindow", "이미지 로딩중..."))
        self.processed_webcam.setText(_translate("MainWindow", "웹캠 로딩중..."))
        self.cam_not_work.setText(_translate("MainWindow", "웹캠이 켜지지 않았어요"))
        self.your_score_is.setText(_translate("MainWindow", "당신의 가위바위보 점수는"))
        self.game_score.setText(_translate("MainWindow", ""))
        self.time_count.setText(_translate("MainWindow", "타이머"))

    def resetUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        self.rock_scissors_paper.setText(_translate("MainWindow", "승패여부"))  # 텍스트를 건드릴려면 여기로 랜덤
        self.win_lost_draw.setText(_translate("MainWindow", "로딩중..."))  # 랜덤
        self.random_image.setText(_translate("MainWindow", "이미지 로딩중..."))
        self.processed_webcam.setText(_translate("MainWindow", "웹캠 로딩중..."))
        self.cam_not_work.setText(_translate("MainWindow", "웹캠이 켜지지 않았어요"))
        self.your_score_is.setText(_translate("MainWindow", "당신의 가위바위보 점수는"))
        self.game_score.setText(_translate("MainWindow", ""))
        self.time_count.setText(_translate("MainWindow", "타이머"))

    # 버튼을 누르면 사라짐
    def hide_start_button(self):  # hide해도 꺼지는거라 기능까지 없어짐

        self.game_logo.hide()  # 게임 로고 label
        self.bunny.hide()  # 토끼 label
        self.game_start.hide()
        self.game_start_button.hide()
        self.game_explain.hide()  # 게임설명 label
        self.game_exit.hide()  # 게임종료 label
        self.game_exit_button.hide()  # 게임종료 버튼
        self.game_explain_button.hide()  # 게임설명 버튼

        ###게임화면 UI 띄우는 부분

        self.rock_scissors_paper.show()
        self.win_lost_draw.show()
        self.random_image.show()
        self.processed_webcam.show()
        self.timer_start_button.show()
        self.before_webcam.show()
        self.time_count.show()

        self.start()  # 웹캠 스타트

    def hide_explain_button(self):
        self.game_explain_button.hide()
        self.game_logo.hide()  # 게임 로고 label
        self.bunny.hide()  # 토끼 label
        self.game_start_button.hide()  # 게임설명 버튼
        self.game_explain.hide()  # 게임설명 label
        self.game_exit.hide()  # 게임종료 label
        self.game_exit_button.hide()  # 게임종료 버튼
        self.background.hide()
        self.game_play_rule.show()
        self.game_explain_start.raise_()
        self.game_explain_start_button.raise_()

        self.game_explain_start.show()  # 시작 라벨도 띄우고
        self.game_explain_start_button.show()  # 시작 버튼도 띄움

    def hide_explain_start_button(self):
        self.game_start.hide()
        self.game_explain_start_button.hide()
        self.game_explain_start.hide()
        self.game_play_rule.hide()
        self.background.show()

        ###게임화면 UI 띄우는 부분

        self.rock_scissors_paper.show()
        self.win_lost_draw.show()
        self.random_image.show()
        self.processed_webcam.show()
        self.timer_start_button.show()
        self.before_webcam.show()
        self.time_count.show()

        self.start()  # 웹캠 스타트

        #### openCV를 활용해서 웹캠 넣기 ####

    def refreshPixmap(self, MainWindow):
        global running, img, opened

        self.resetUi(MainWindow)

        self.update_check = False
        self.capture_image = False

        cap = cv2.VideoCapture(0)  # 카메라 순서대로 0,1,2 ... 인덱스를 지정해주는데 오류가 난다면 -1로 지정을 해준다

        cap.set(cv2.CAP_PROP_FPS, int(15))
        cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 300)
        cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 300)
        # width = cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 300)#사이즈만 어떻게 하면 된다
        # height = cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 300)
        # self.processed_webca.resize(width, height)

        opened = cap.isOpened()
        timer = 0
        self.score = 0

        # https://answers.opencv.org/question/146103/webcam-not-working/
        while running:  # 1초에 while문이 15번 돌아감 -> 프레임을 15프레임으로 고정시켜서?
            if self.update_check:  # GUI를 갱신해야한다면, 갱신시킨다.
                timer += 1
                if timer == 1:
                    self.player_lose = False
                    self.rock_scissors_paper.setText(QtCore.QCoreApplication.translate("MainWindow", "승패여부"))
                if timer == 15:  # 1초
                    self.refresh_mission()
                    self.time_count.setText(QtCore.QCoreApplication.translate("MainWindow", "3"))
                if timer == 30:  # 2초
                    self.time_count.setText(QtCore.QCoreApplication.translate("MainWindow", "2"))
                if timer == 45:  # 3초
                    self.time_count.setText(QtCore.QCoreApplication.translate("MainWindow", "1"))
                if timer == 60:  # 4초 - 캡쳐시키기
                    self.capture_image = True
                    self.time_count.setText(QtCore.QCoreApplication.translate("MainWindow", "0"))
                if timer == 61:  # 승패 판정하기
                    player_rsp = model.classify("D:/PyCharmProject/input")  # 웹캠 캡쳐한거 이미지 분류
                    self.calculate_win(player_rsp)  # 분류한거 바탕으로 승패 판정
                if timer == 75 :
                    if self.player_lose :
                        self.rock_scissors_paper.setText(QtCore.QCoreApplication.translate("MainWindow", "패배!"))
                        self.rock_scissors_paper.update()  # 갱신!
                    else :
                        self.rock_scissors_paper.setText(QtCore.QCoreApplication.translate("MainWindow", "승리!"))
                        self.rock_scissors_paper.update()  # 갱신!
                if timer == 120 :
                    self.update_check = False
                    timer = 0
                    if self.player_lose:
                        break

            ret, img = cap.read()  # 비디오를 한프레임씩 읽는다.
            if ret:
                if self.capture_image:  # 이미지를 캡쳐하라고 하면 캡쳐해서 상대경로에 저장한다.
                    if not os.path.exists("D:/PyCharmProject/input"):  # 경로(폴더) 없으면 만들기
                        os.makedirs("D:/PyCharmProject/input")
                    cv2.imwrite("D:/PyCharmProject/input/input.png", img)
                    self.img_trim()
                    self.capture_image = False
                img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
                h, w, c = img.shape
                qImg = QtGui.QImage(img.data, w, h, w * c, QtGui.QImage.Format_RGB888)
                self.pixmap = QtGui.QPixmap.fromImage(qImg)
                self.processed_webcam.setPixmap(self.pixmap)
                self.processed_webcam.update()  # 라벨의 이미지를 계속 바꾸는 것
            else:
                QtWidgets.QMessageBox.about(MainWindow, "Error", "Cannot read frame.")
                print("cannot read frame.")
                break

            loop = QtCore.QEventLoop()  # while문 루프 도는 속도를 제한을 두는 코드
            QtCore.QTimer.singleShot(25, loop.quit)
            loop.exec_()

        cap.release()
        self.show_score()
        print("Thread end.")

    def start(self):
        global running
        running = True
        th = threading.Thread(target=self.refreshPixmap, args=(self,))
        th.daemon = True
        th.start()
        print("started..")

    def stop(self):
        global running
        running = False
        # 점수 초기화
        print("stoped..")

        #### openCV를 활용해서 웹캠 넣기 ####

    def img_trim(self) :
        from PIL import Image
        img = cv2.imread("D:/PyCharmProject/input/input.png", cv2.IMREAD_GRAYSCALE)
        crop_img = img[30:330, 170:470]
        cv2.imwrite("D:/PyCharmProject/input/input.png", crop_img)
        img = Image.open("D:/PyCharmProject/input/input.png")
        img_resize = img.resize((200,300))
        img_resize.save("D:/PyCharmProject/input/input.png")

    def change_word(self):  # 텍스트를 바꿔줍니다
        _translate = QtCore.QCoreApplication.translate
        # self.mission_winlose = random.choice(["이기세요!", "지세요!", "비기세요!"])  # 승패 랜덤 뽑기
        self.win_lost_draw.setText(_translate("MainWindow", self.mission_winlose))  # 랜덤 텍스트 바꾸기
        self.win_lost_draw.update()  # 갱신!

        '''# self.mission_rsp = random.choice(["가위", "바위", "보"])  # 가위바위보 랜덤 뽑기
        self.rock_scissors_paper.setText(_translate("MainWindow", self.mission_rsp))  # 랜덤 텍스트 바꾸기
        self.rock_scissors_paper.update()  # 갱신!'''

    def change_image(self,num):  # 게임화면에 표시될 이미지를 바꿔준다.
        path = "D:/PyCharmProject/design_source/rsp/"  # 파일경로 "*.파일형식"하면 이름상관없이 형식대로 "*.*"하면 닥치는대로 다 불러옵니다
        image_list = os.listdir(path)  # 파일들을 불러와서 배열에 넣습니당
        print(image_list)
        self.image_rsp = image_list[num]  # 이미지 하나를 뽑습니다
        self.random_image.setPixmap(QtGui.QPixmap(path + self.image_rsp))  # 이미지를 넣습니다
        self.random_image.update()  # 갱신하면 끝!

    def refresh_mission(self):

        self.mission_winlose = random.choice(["이기세요!", "지세요!", "비기세요!"])  # 승패 랜덤 뽑기
        self.mission_rsp = random.choice(["가위", "바위", "보"])  # 가위바위보 랜덤 뽑기
        print("컴퓨터는" + self.mission_rsp)
        if self.mission_rsp == "보" : temp = 0 # paper가 1
        if self.mission_rsp == "바위" : temp = 1 # rock이 2
        if self.mission_rsp == "가위" : temp = 2 # scissor가 3

        self.change_word()
        self.change_image(temp)

    def calculate_win(self, player_rsp):  # 승패 판정하기
        if self.mission_winlose == "이기세요!":
            if player_rsp == "rock" and self.mission_rsp == "가위":
                self.score += 1
            elif player_rsp == "scissors" and self.mission_rsp == "보":
                self.score += 1
            elif player_rsp == "paper" and self.mission_rsp == "바위":
                self.score += 1
            else:
                self.player_lose = True

        if self.mission_winlose == "지세요!":
            if player_rsp == "rock" and self.mission_rsp == "보":
                self.score += 1
            elif player_rsp == "scissors" and self.mission_rsp == "바위":
                self.score += 1
            elif player_rsp == "paper" and self.mission_rsp == "가위":
                self.score += 1
            else:
                self.player_lose = True

        if self.mission_winlose == "비기세요!":
            if player_rsp == "rock" and self.mission_rsp == "바위":
                self.score += 1
            elif player_rsp == "scissors" and self.mission_rsp == "가위":
                self.score += 1
            elif player_rsp == "paper" and self.mission_rsp == "보":
                self.score += 1
            else:
                self.player_lose = True

    def show_score(self):  # 게임이 끝나면
        global score_
        _translate = QtCore.QCoreApplication.translate
        # 캠꺼지는 부분 추가해주세요
        self.rock_scissors_paper.hide()  # 게임화면 부분 라벨 다 지우기
        self.win_lost_draw.hide()
        self.random_image.hide()
        self.processed_webcam.hide()
        self.timer_start_button.hide()
        self.before_webcam.hide()
        self.time_count.hide()

        self.your_score_is.show()  # 게임점수 보여주기
        self.back_start_button.show()  # 처음화면으로 가는 버튼 보여주기
        self.game_score.setText(_translate("MainWindow", "5")) #str(self.score)
        self.game_score.update()
        self.game_score.show()

    def update_bool(self):
        if self.update_check == False:
            self.update_check = True

    def back_start_window(self):
        self.your_score_is.hide()  # 점수화면 UI 끄기
        self.game_score.hide()
        self.back_start_button.hide()

        self.game_logo.show()  # 게임 로고 label
        self.bunny.show()  # 토끼 label
        # self.game_start.show()
        self.game_start_button.show()
        self.game_explain.show()  # 게임설명 label
        self.game_exit.show()  # 게임종료 label
        self.game_exit_button.show()  # 게임종료 버튼
        self.game_explain_button.show()  # 게임설명 버튼


if __name__ == "__main__":
    import sys

    running = False
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()

    # app.aboutToQuit.connect(Ui_MainWindow.onExit) #위에 X를 누르면 자동으로 꺼져요

    sys.exit(app.exec_())